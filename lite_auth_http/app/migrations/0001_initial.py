# Generated by Django 3.1.1 on 2020-09-14 11:32

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import jsonfield.fields
import utils.datetime_helper


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='PasswordHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(max_length=50, unique=True, verbose_name='用户名')),
                ('password', jsonfield.fields.JSONField(default=[], verbose_name='password')),
            ],
        ),
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(help_text='用户的登录名，相当于ldap的 cn/uid/sn<br>「 uid只允许字母，数字，下划线（_），横杆（-） 」', max_length=50, unique=True, validators=[django.core.validators.RegexValidator(message='uid只允许字母，数字，下划线（_），横杆（-）', regex='^[\\w-]+\\Z')], verbose_name='用户名/uid')),
                ('name', models.CharField(help_text='名字，相当于ldap的 givenName。一般填中文名', max_length=50, verbose_name='姓名/name')),
                ('mail', models.CharField(blank=True, default='', help_text='电子邮箱，相当于ldap的 mail', max_length=100, verbose_name='邮箱/mail')),
                ('mobile', models.CharField(blank=True, default='', help_text='手机，相当于ldap的 mobile', max_length=100, verbose_name='手机/mobile')),
                ('ssh_key', models.TextField(blank=True, default='', help_text='公钥', verbose_name='公钥/ssh_key')),
                ('is_active', models.BooleanField(default=True, help_text='激活才允许登录', verbose_name='激活')),
                ('try_count', models.IntegerField(blank=True, default=0, help_text='只有管理员才能修改', verbose_name='尝试登录次数')),
                ('last_try_time', models.DateTimeField(blank=True, null=True, verbose_name='上次登录失败时间')),
                ('password_never_expire', models.BooleanField(default=False, verbose_name='用户密码永不过期')),
                ('password_update_date', models.DateField(blank=True, default=utils.datetime_helper.now, verbose_name='上次修改密码日期')),
            ],
            options={
                'verbose_name_plural': '用户',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gid', models.CharField(max_length=30, unique=True, validators=[django.core.validators.RegexValidator(message='gid只允许字母，数字，下划线（_），横杆（-）', regex='^[\\w-]+\\Z')], verbose_name='组名/gid')),
                ('desc', models.TextField(blank=True, default='', verbose_name='描述')),
                ('users', models.ManyToManyField(blank=True, db_table='app_group_userinfo', related_name='groups', to='app.UserInfo', verbose_name='users')),
            ],
            options={
                'verbose_name_plural': '组',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
